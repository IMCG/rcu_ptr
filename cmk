#!/bin/python2
#
# cmk
'''
CRF Make is a convenience wrapper written in Python around CMake to simplify its calling semantics, parametrization & leverage the build procedure of C/C++ projects.
The main purpose of this tool is to allow dev build & testing in a fast & compact manner, to accelerate C/C++ development allowing the software engineer to trigger build & test
in a matter of seconds out of command line histroy. The emphasis is on compact naming and intuitive flags with default values but also configurability when needed.

Please consult ./cmk -h for more information.


Created on 2016.04.18
@author cvirtue
'''
from argparse import ArgumentParser, Action
from os.path import realpath
from os.path import abspath
from os.path import islink
from os.path import isfile
from os.path import isdir
from shutil import rmtree
import subprocess as sp
import logging as log
import json
import sys
import os



class Targets( object ):
  def __init__(self, source_dir, build_home, install_home, build_type):
    self.source_dir = source_dir
    self.build_home = build_home
    self.install_home = install_home
    self.build_type = build_type


def build_type_of(args):
  return( 'Release' if args.release else 'Debug' )
  

def check_file(fpath, message=''):
  if not isfile(fpath):
    error_message = message if message else 'invalid file path: %s' % fpath
    log.error(error_message)
    sys.exit(1)


def check_dir(dpath, message=''):
  if not isdir(dpath):
    error_message = message if message else 'not a directory: %s' % dpath
    log.error(error_message)
    sys.exit(1)


def make_targets(args, config):
  source_dir = '..'
  build_type = build_type_of(args)
  build_home   = config.setdefault('build_home', './build') 
  install_home = config.setdefault('install_home', './install')
  install_home = abspath(install_home)
  log.debug('build home:   %s' % build_home)
  log.debug('install home: %s' % install_home)
  return Targets(source_dir, build_home, install_home, build_type)


def init_logging(log_level=log.INFO):
  log.basicConfig(format='[%(levelname)s] %(message)s', level=log_level)


def supported_toolchains():
  return [ 'gcc', 'llvm' ]


def args_of(argv):
  parser = ArgumentParser(description="CRF Make is a convenience wrapper written in Python around CMake to simplify its calling semantics, parametrization & leverage the build procedure of C/C++ projects.")
  parser.add_argument('-c', '--clean', help='triggers reconfiguration & a clean rebuild - it removes the dir configured as build_home', action='store_true')
  parser.add_argument('-r', '--release', action='store_true', help='triggers the release build - a (heavily) optimised build')
  parser.add_argument('-v', '--verbose', action='store_true', help='triggers verbose compilation')
  parser.add_argument('-t', '--toolchain', help='sets the toolchain to build the project with', default='gcc', type=str, choices=supported_toolchains())
  parser.add_argument('--config-file', type=str, default='./cmk.json', help='sets the configuration JSON to be used instead the default - if no file is present the defaults will be used')

  mutex_g = parser.add_mutually_exclusive_group()
  mutex_g.add_argument('--asan', action='store_true', help='triggers build for running AddressSanitizer (ASan)')
  mutex_g.add_argument('--tsan', action='store_true', help='triggers build for running ThreadSanitizer  (TSan)')
  mutex_g.add_argument('--msan', action='store_true', help='triggers build for running MemorySanitizer  (MSan)')

  return parser.parse_args(argv)


def sanitizer_define_of(args):
  if   args.asan: sanitizer_define = '-D_CRF_SANITIZE_BUILD=asan'
  elif args.tsan: sanitizer_define = '-D_CRF_SANITIZE_BUILD=tsan'
  elif args.msan: sanitizer_define = '-D_CRF_SANITIZE_BUILD=msan'
  else:           sanitizer_define = '-D_CRF_SANITIZE_BUILD=none'
  return sanitizer_define


def make_commands(args, targets):
  binutils_define   = '-D_CMAKE_TOOLCHAIN_PREFIX=llvm-' if ( args.toolchain == 'llvm' ) else ''
  sanitizer_define  = sanitizer_define_of(args)
  verbosity_defines = '-DCMAKE_RULE_MESSAGES=OFF -DCMAKE_VERBOSE_MAKEFILE=ON' if args.verbose else ''
  cmake_cmd = [ \
    'cmake', \
    binutils_define, \
    sanitizer_define, \
    verbosity_defines, \
    '-DCMAKE_BUILD_TYPE=%s' % targets.build_type, \
    '-D_CRF_INSTALL_HOME=%s' % targets.install_home, \
    '-G', 'Unix Makefiles', \
    targets.source_dir  \
  ]
  make_cmd  = ['make', ]
  if args.verbose:
    make_cmd.extend([ 'VERBOSE=1', '--no-print-directory' ])
  install_cmd = ['make', 'install']
  return[ cmake_cmd, make_cmd, install_cmd ]


def setup_env(args, env):
  # as GCC is the default compiler supported..
  if( args.toolchain == 'llvm' ):
    env['CC']  = '/usr/bin/clang'
    env['CXX'] = '/usr/bin/clang++'

  return env


def execute(command):
  exit_status = sp.call(command)
  return int(exit_status)


def clean(d):
  if isdir(d):
    log.debug('cleaning dir: %s' % d)
    rmtree(d)


def remake(d):
  if not isdir(d):
    os.makedirs(d)

def clean_all(targets):
  clean(targets.build_home)


def check_platform_support():
  # for platform info please see: https://docs.python.org/2/library/sys.html
  platform  = sys.platform
  supported = [ 'linux2', 'darwin' ]
  if not( platform in supported ):
    log.error('unsupported platform: %s' % platform)
    sys.exit(1)


def config_of(config_file):
  if not isfile(config_file):
    log.info('config file does not exists: using defaults')
    return {}

  with open(config_file, 'r') as f:
    config = json.load(f)

  return config


def main(argc, argv):
  init_logging()
  check_platform_support()
  args = args_of(argv[1:])
  config = config_of(args.config_file) 

  targets = make_targets(args, config)
  if args.clean:
    clean_all(targets)

  remake(targets.build_home)

  commands = make_commands(args, targets)
  setup_env(args, os.environ)
  os.chdir(targets.build_home)
  to_exit_status = lambda cmd: execute(cmd)
  for exit_status in map(to_exit_status, commands):
    if( exit_status != 0 ):
      sys.exit(1)


if __name__=='__main__':
  main(len(sys.argv), sys.argv)

